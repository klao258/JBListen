const { Api } = require('telegram');
const GroupConfig = require('../models/GroupConfig');
const UserProfile = require('../models/UserProfile');
const GameMatchLog = require('../models/GameMatchLog');
const { dispatchPush } = require('./pushDispatcher');
const moment = require('moment');

const whiteKeys = ['Ê∏∏Êàè', '‰ΩôÈ¢ù', 'ÊµÅÊ∞¥', 'ËøîÊ∞¥', 'ÂèçÊ∞¥']

// Áî®Êà∑ËØÑÂàÜÂáΩÊï∞
const calculateUserScore = (logs, userId) => {
  if (!logs || logs.length < 20) return { score: 50, reason: 'Êó•Âøó‰∏çË∂≥20Êù°Ôºå‰øùÊåÅ‰∏≠ÊÄß' };

  const groupIds = new Set(logs.map(l => l.groupId));
  const groupCount = groupIds.size;

  // 1. Áæ§ÁªÑÊï∞ÈáèËØÑÂàÜÔºàË∂äÂ∞ëË∂äÂèØÁñëÔºâ
  let groupScore = 0;
  if (groupCount >= 4) groupScore = -25;
  else if (groupCount === 3) groupScore = -10;
  else if (groupCount === 2) groupScore = -5;
  else if (groupCount <= 1) groupScore = +10;

  // 2. Âπ≥ÂùáÊìç‰ΩúÈó¥ÈöîËØÑÂàÜ
  const timestamps = logs.map(l => new Date(l.matchedAt).getTime()).sort((a, b) => a - b);
  const intervals = [];
  for (let i = 1; i < timestamps.length; i++) {
    intervals.push((timestamps[i] - timestamps[i - 1]) / 60000);
  }
  const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
  let intervalScore = 0;
  if (avgInterval < 2) intervalScore = +25;
  else if (avgInterval < 3) intervalScore = +15;
  else if (avgInterval < 5) intervalScore = +8;
  else if (avgInterval > 10) intervalScore = -10;
  else intervalScore = 0;

  // 3. Êó•Ê¥ªË∑ÉÂ∫¶
  let timeScore = 0
  let daySlotMap = {}; // ÁªìÊûÑ: { '2025-06-10': Set('08:00', '08:30', ...) }
  let minDate = null;
  let maxDate = null;
  for (const log of logs) {
    if (!log.matchedAt) continue;

    const utc = new Date(log.matchedAt);
    if (isNaN(utc.getTime())) continue;

    // ‚úÖ Â∞Ü UTC Êó∂Èó¥ËΩ¨Êç¢‰∏∫‰∏úÂÖ´Âå∫Êó∂Èó¥ÔºàÂåó‰∫¨Êó∂Èó¥Ôºâ
    const local = new Date(utc.getTime() + 8 * 60 * 60 * 1000);

    const yyyy = local.getFullYear();
    const mm = String(local.getMonth() + 1).padStart(2, '0');
    const dd = String(local.getDate()).padStart(2, '0');
    const hh = String(local.getHours()).padStart(2, '0');
    const minute = local.getMinutes();
    const slotMinute = minute < 30 ? '00' : '30';

    const dayKey = `${yyyy}-${mm}-${dd}`;
    const slotKey = `${hh}:${slotMinute}`;

    // Áî®‰∫éÁªüËÆ°Ë∑®Ë∂äÁöÑÂ§©Êï∞
    const dayTime = new Date(Date.UTC(yyyy, Number(mm) - 1, Number(dd)));

    if (!daySlotMap[dayKey]) daySlotMap[dayKey] = new Set();
    daySlotMap[dayKey].add(slotKey);

    if (!minDate || dayTime < minDate) minDate = dayTime;
    if (!maxDate || dayTime > maxDate) maxDate = dayTime;
  }

  const sortedDates = Object.keys(daySlotMap).sort();  // ÈªòËÆ§Êåâ YYYY-MM-DD ÊéíÂ∫è
  if (sortedDates.length > 2) {
    const firstDay = sortedDates[0];
    const lastDay = sortedDates[sortedDates.length - 1];

    // 2. Âà†Èô§È¶ñÂ∞æ‰∏§Â§©
    delete daySlotMap[firstDay];
    delete daySlotMap[lastDay];
  } else {
    daySlotMap = {}
  }

  // ËÆ°ÁÆóÊØèÂ§©ÁöÑÊ¥ªË∑ÉÂ∫¶
  const dailyActives = Object.values(daySlotMap).map(set => set.size);

  // ËÆ°ÁÆóË∑®Ë∂äÂ§©Êï∞ÔºàÂåÖÂê´È¶ñÂ∞æÔºâÔºåÊúÄÂ∞ë‰∏∫1
  const totalDays = Math.max(1, Math.floor((maxDate - minDate) / (24 * 60 * 60 * 1000)) + 1);

  // Âπ≥ÂùáÊ¥ªË∑ÉÂ∫¶ÁôæÂàÜÊØî
  const totalActive = dailyActives.reduce((sum, val) => sum + val, 0);
  const avgPercent = (totalActive / totalDays).toFixed(0);
  const avgActiveRo = Number((avgPercent / 48).toFixed(2));

  if (totalDays > 1) {
    const capped = Math.min(100, Math.max(0, avgActiveRo));
  
    // ‰∏≠ÂøÉÁÇπËÆæ‰∏∫ 30%ÔºåÈù†Ëøë 30% ÊúÄÂÆâÂÖ®ÔºåÂÅèÁ¶ªÂ∞±Âä†ÂàÜÔºàË∂äÂÅèÁ¶ªË∂äÂèØÁñëÔºâ
    const diff = capped - 30; // ‰∏é‚ÄúÊ≠£Â∏∏‚ÄùÊ¥ªË∑ÉÂ∫¶ÁöÑÂÅèÁ¶ªÁ®ãÂ∫¶
    timeScore = Math.round(diff * 1.2); // ÊØèÂÅèÁ¶ª 1%ÔºåÂä† 1.2 ÂàÜ
  
    // ÈôêÂà∂ÊúÄÈ´òÂæóÂàÜ
    if (timeScore > 30) timeScore = 30;
  } else {
    timeScore = 15; // Êï∞ÊçÆ‰∏çË∂≥ÔºåËΩªÂæÆÊâìÂàÜ‰ΩÜ‰∏çÂà§ÂÆö‰∏∫Âà∑
  }

  // 4. ÂàÜÊ°∂È¢ëÁéáÂàÜÊûêÔºàÊØèÂ∞èÊó∂Ôºâ
  const buckets = {};
  logs.forEach(log => {
    const hourKey = new Date(log.matchedAt).toISOString().slice(0, 13);
    if (!buckets[hourKey]) buckets[hourKey] = [];
    buckets[hourKey].push(new Date(log.matchedAt).getTime());
  });
  let frequentBuckets = 0;
  let totalBuckets = 0;
  for (const times of Object.values(buckets)) {
    if (times.length < 2) continue;
    totalBuckets++;
    times.sort((a, b) => a - b);
    const gaps = [];
    for (let i = 1; i < times.length; i++) {
      gaps.push((times[i] - times[i - 1]) / 60000);
    }
    const avg = gaps.reduce((a, b) => a + b, 0) / gaps.length;
    if (avg <= 3) frequentBuckets++;
  }

  let freqScore = 0;
  if (totalBuckets > 0) {
    const ratio = frequentBuckets / totalBuckets;
    if (ratio > 0.75) freqScore = +25;
    else if (ratio > 0.5) freqScore = +15;
    else if (ratio > 0.3) freqScore = +8;
    else if (ratio > 0.15) freqScore = -8;
    else if (ratio > 0) freqScore = -15;
    else freqScore = -25;
  }

  const score = Math.max(0, Math.min(100, 50 + groupScore + intervalScore + timeScore + freqScore));

  console.log(`üìä ${userId}ÊØèÊó• slot ÂàÜÂ∏É: ${avgPercent}`, Object.fromEntries(
    Object.entries(daySlotMap).map(([k, v]) => [k, Array.from(v).sort()])
  ));

  return {
    score,
    reason: `Ë∑®Áæ§Ôºö${ groupCount } ‰∏™Ôºà${groupScore}Ôºâ
            Ëß¶ÂèëÈó¥ÈöîÂùáÂÄºÔºö${ avgInterval.toFixed(1) }minÔºà${ intervalScore }Ôºâ
            Ê¥ªË∑ÉÂ∫¶ÂùáÂÄºÔºöË∑®${totalDays}Â§©, ÂùáÂÄº${avgPercent}ÔºåÂç†ÊØîÔºö${ avgActiveRo }%Ôºà ${ timeScore }Ôºâ
            È´òÈ¢ëÊ°∂Âç†ÊØîÔºö${ frequentBuckets }/${ totalBuckets }Ôºà ${ freqScore }Ôºâ`
  };
}

// ËÆ∞ÂΩïÊó•Âøó, ÂçïÁî®Êà∑ÊúÄÂ§ßËÆ∞ÂΩï 1000 Êù°Êó•Âøó
const insertUserLog = async (logData) => {
  const { userId, username, nickname, groupId, groupName, sendDateTime, ...matchedGames } = logData;

  // Step 1: ÊèíÂÖ•Êñ∞Êó•ÂøóÔºàmatchedAt ‰ºöËá™Âä®ÂÜôÂÖ•Ôºâ
  await GameMatchLog.create({ userId, username, nickname, groupId, groupName, sendDateTime, ...matchedGames });

  // Step 2: Êü•ËØ¢ËØ•Áî®Êà∑Êó•ÂøóÊÄªÊù°Êï∞
  const count = await GameMatchLog.countDocuments({ userId });

  // Step 3: Â¶ÇÊûúË∂ÖËøá 1000ÔºåÂà†Èô§ÊúÄÊó©ÁöÑ 10 Êù°
  if (count > 1000) {
    const oldest = await GameMatchLog.find({ userId })
      .sort({ matchedAt: 1 }) // ÊúÄÊó©ÁöÑÊó•Âøó
      .limit(10)
      .select('_id');

    const ids = oldest.map(doc => doc._id);
    await GameMatchLog.deleteMany({ _id: { $in: ids } });
  }

  const logs = await GameMatchLog.find({ userId }).sort({ matchedAt: -1 }).limit(1000);
  const pr = calculateUserScore(logs, userId)
  return pr
}

/** ÊñáÊú¨‰∏çË∂Ö16ÔºåÊç¢Ë°åÁ¨¶‰∏çË∂Ö1‰∏™ÔºåÂøÖÈ°ªÂåÖÂê´Â§ß‰∫é0ÁöÑÊï∞Â≠ó */
const isValidMessage = (text) => {
  const isLengthValid = text.length <= 16;
  const newLineCount = (text.match(/\n/g) || []).length <= 1;

  // ÂåπÈÖç‰∏Ä‰∏™Â§ß‰∫é 0 ÁöÑÊï∞Â≠óÔºàÊï¥Êï∞ÊàñÂ∞èÊï∞Ôºâ
  const containsPositiveNumber = /(?:^|[^\d])([1-9]\d*(?:\.\d+)?|0*\.\d*[1-9])(?:[^\d]|$)/.test(text);
  return whiteKeys?.includes(text) || (isLengthValid && newLineCount && containsPositiveNumber)
}

// Â§ÑÁêÜÊ∂àÊÅØ
exports.handleMessage = async ({ groupId, groupName,  userId, username, nickname, message, sendDateTime }) => {
  // ‰ªéÊ∂àÊÅØ‰∏≠ÊèêÂèñÁöÑ groupId ÈÉΩ‰∏∫Ê≠£Êï∞, Êï∞ÊçÆÂ∫ì‰∏≠Â≠òÂèñÁöÑÊòØË¥üÊï∞
  let group = await GroupConfig.findOne({ groupId });
  if (!group || !group.isWatched) return;
  if(!isValidMessage(message)) return false

  let matchedGames = {};
  for (const gc of group.gameConfigs) {
    const matched = gc.keywords.filter(k => {
      if(whiteKeys?.includes(k)){
        if(k === message) return true
        return false
      }
      return message?.toLowerCase?.()?.includes(k?.toLowerCase()); // ÊúâËã±ÊñáÊòØËΩ¨Â∞èÂÜôÊù•ÂåπÈÖç
    })
    if (matched.length > 0) {
      matchedGames = {
        gameType: gc.gameType,
        gameLabel: gc.gameLabel,
        matchedKeywords: matched[0],
        originalMessage: message
      };
    }
  }

  if (JSON.stringify(matchedGames) === '{}') return;

  // Step 1: ÂÜôÂÖ•Êó•Âøó
  const pr = await insertUserLog({ userId,  username, nickname, groupId,  groupName, sendDateTime,  ...matchedGames })

  // Step 2: ÂÜôÂÖ•Áî®Êà∑‰ø°ÊÅØË°®
  let profile = await UserProfile.findOne({ userId });
  if (!profile) profile = new UserProfile({ userId, groups: [] });
      profile.nickname = nickname
      profile.username = username
  let groupRecord = profile.groups.find(g => g?.groupId === groupId);
  if (!groupRecord) {
    groupRecord = { groupId, groupName, gameTypes: [matchedGames.gameLabel] };
    profile.groups.push(groupRecord);
  } else {
    if(!groupRecord.gameTypes.includes(matchedGames.gameLabel)){
      groupRecord.gameTypes.push(matchedGames.gameLabel);
    }
  }
  await profile.save();

  // Step 3: Êé®ÈÄÅÂØπÂ∫îÊ∏∏ÊàèÂÆ¢Êúç
  await dispatchPush({
    user: {
      id: userId,
      nickname: nickname,
      username: username
    },
    groupName,
    gameType: matchedGames.gameType,
    gameLabel: matchedGames.gameLabel,
    originalMessage: message,
    pr
  });
};